4.【强制】禁用保留字，如desc、range、match、delayed等，请参考MySQL官方保留字。 
1.【强制】表达是与否概念的字段，必须使用is_xxx的方式命名，数据类型是unsignedtinyint（1表示是，0表示否） 
。说明：任何字段如果为非负数，必须是unsigned。正例：表达逻辑删除的字段名is_deleted，1表示删除，0表示未删除。 
6.【强制】小数类型为decimal，禁止使用float和double。 
5.【强制】主键索引名为pk_字段名；唯一索引名为uk_字段名；普通索引名则为idx_字段名。 
7.【强制】如果存储的字符串长度几乎相等，使用char定长字符串类型。 
8.【强制】varchar是可变长字符串，不预先分配存储空间，长度不要超过5000，如果存储长度大于此值，定义字段类型为text，独立出来一张表，用主键来对应，避免影响其它字段索引效率。 
9.【强制】表必备三字段：id, gmt_create, gmt_modified。 

(二)索引规约
1.【强制】业务上具有唯一特性的字段，即使是多个字段的组合，也必须建成唯一索引。 
2.【强制】超过三个表禁止join。需要join的字段，数据类型必须绝对一致； 
多表关联查询时，保证被关联的字段需要有索引。说明：即使双表join也要注意表索引、SQL性能。 
3.【强制】在varchar字段上建立索引时，必须指定索引长度，没必要对全字段建立索引，根据实际文本区分度决定索引长度即可。 
说明：索引的长度与区分度是一对矛盾体，一般对字符串类型数据，长度为20的索引，区分度会高达90%以上，可以使用count(distinctleft(列名, 索引长度))/count(*)的区分度来确定。 
4.【强制】页面搜索严禁左模糊或者全模糊，如果需要请走搜索引擎来解决。 
说明：索引文件具有B-Tree的最左前缀匹配特性，如果左边的值未确定，那么无法使用此索引。 
5.【推荐】如果有orderby的场景，请注意利用索引的有序性。 
orderby最后的字段是组合索引的一部分，并且放在索引组合顺序的最后，避免出现file_sort的情况，影响查询性能。 
正例：wherea=? andb=? orderbyc;索引：a_b_c 
6.【推荐】利用覆盖索引来进行查询操作，避免回表。 
7.【推荐】利用延迟关联或者子查询优化超多分页场景。 
说明：MySQL并不是跳过offset行，而是取offset+N行，然后返回放弃前offset行，返回N行， 
那当offset特别大的时候，效率就非常的低下，要么控制返回的总页数，要么对超过特定阈值的页数进行SQL改写。 
正例：先快速定位需要获取的id段，然后再关联：SELECT a.* FROM 表1 a, (select id from 表1 where 条件LIMIT 100000,20 ) b where a.id=b.id


(三)SQL语句
1.【强制】不要使用count(列名)或count(常量)来替代count()，count()是SQL92定义的标准统计行数的语法，跟数据库无关，跟NULL和非NULL无关。 
说明：count(*)会统计值为NULL的行，而count(列名)不会统计此列为NULL值的行。 
2.【强制】count(distinctcol)计算该列除NULL之外的不重复行数，注意count(distinctcol1, col2)如果其中一列全为NULL，那么即使另一列有不同的值，也返回为0。 
3.【强制】当某一列的值全是NULL时，count(col)的返回结果为0，但sum(col)的返回结果为NULL，因此使用sum()时需注意NPE问题。 
正例：可以使用如下方式来避免sum的NPE问题：SELECTIF(ISNULL(SUM(g)),0,SUM(g))FROMtable; 
4.【强制】使用ISNULL()来判断是否为NULL值。 
说明：NULL与任何值的直接比较都为NULL。 
1）NULL<>NULL的返回结果是NULL，而不是false。 
2）NULL=NULL的返回结果是NULL，而不是true。 
3）NULL<>1的返回结果是NULL，而不是true。 
5.【强制】在代码中写分页查询逻辑时，若count为0应直接返回，避免执行后面的分页语句。 
6.【强制】不得使用外键与级联，一切外键概念必须在应用层解决。 
说明：以学生和成绩的关系为例，学生表中的student_id是主键，那么成绩表中的student_id则为外键。 
如果更新学生表中的student_id，同时触发成绩表中的student_id更新，即为级联更新。 
外键与级联更新适用于单机低并发，不适合分布式、高并发集群； 
级联更新是强阻塞，存在数据库更新风暴的风险；外键影响数据库的插入速度。 
7.【强制】禁止使用存储过程，存储过程难以调试和扩展，更没有移植性。 
8.【强制】数据订正时，删除和修改记录时，要先select，避免出现误删除，确认无误才能执行更新语句。 
9.【推荐】in操作能避免则避免，若实在避免不了，需要仔细评估in后边的集合元素数量，控制在1000个之内。 
10.【参考】如果有全球化需要，所有的字符存储与表示，均以utf-8编码，注意字符统计函数的区别。 
说明： 
SELECT LENGTH(“轻松工作”)；返回为12 
SELECT CHARACTER_LENGTH(“轻松工作”)；返回为4 
如果需要存储表情，那么选择utfmb4来进行存储，注意它与utf-8编码的区别。 
11.【参考】TRUNCATETABLE比DELETE速度快，且使用的系统和事务日志资源少， 
但TRUNCATE无事务且不触发trigger，有可能造成事故，故不建议在开发代码中使用此语句。 
说明： 
TRUNCATETABLE在功能上与不带WHERE子句的DELETE语句相同。

   避免使用NULL字段(NULL字段很难查询优化、NULL字段的索引需要额外空间、NULL字段的复合索引无效);
   前缀索引


MYSQL数据库设计原则
 
    1、核心原则
        不在数据库做运算;
        cpu计算务必移至业务层;
        控制列数量(字段少而精,字段数建议在20以内);
        平衡范式与冗余(效率优先；往往牺牲范式)
        拒绝3B(拒绝大sql语句：big sql、拒绝大事物：big transaction、拒绝大批量：big batch);
 
    2、字段类原则
        用好数值类型(用合适的字段类型节约空间);
        字符转化为数字(能转化的最好转化,同样节约空间、提高查询性能);
        避免使用NULL字段(NULL字段很难查询优化、NULL字段的索引需要额外空间、NULL字段的复合索引无效);
        少用text类型(尽量使用varchar代替text字段);
     
    3、索引类原则
        合理使用索引(改善查询,减慢更新,索引一定不是越多越好);
        字符字段必须建前缀索引;
        不在索引做列运算;
        innodb主键推荐使用自增列(主键建立聚簇索引,主键不应该被修改,字符串不应该做主键)(理解Innodb的索引保存结构就知道了);
        不用外键(由程序保证约束);
     
    4、sql类原则
        sql语句尽可能简单(一条sql只能在一个cpu运算,大语句拆小语句,减少锁时间,一条大sql可以堵死整个库);
        简单的事务;
        避免使用trig/func(触发器、函数不用客户端程序取而代之);
        不用select *(消耗cpu,io,内存,带宽,这种程序不具有扩展性);
        OR改写为IN(or的效率是n级别);
        OR改写为UNION(mysql的索引合并很弱智);
            select id from t where phone = ’159′ or name = ‘john’;
            =>
            select id from t where phone=’159′
            union
            select id from t where name=’jonh’
        避免负向%;
        慎用count(*);
        limit高效分页(limit越大，效率越低);
        使用union all替代union(union有去重开销);
        少用连接join;
        使用group by;
        请使用同类型比较;
        打散批量更新;
         
    5、性能分析工具
        show profile;
        mysqlsla;
        mysqldumpslow;
        explain;
        show slow log;
        show processlist;




变更类型 10 APPOINT_TIME: 预约时间; 20 INSPECT_ORG:  验房机构; 30 INSPECTOR:验房师; 40 其他 

